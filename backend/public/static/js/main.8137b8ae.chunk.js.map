{"version":3,"sources":["components/Chat/Chat.module.css","components/Message/Message.module.css","components/Message/Message.js","components/Chat/Chat.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Message","userData","className","styles","style","display","flexDirection","alignItems","margin","padding","width","textAlign","gap","username","time","fontSize","fontWeight","message","defaultProps","Chat","socket","room","useState","setMessage","messageList","setMessageList","submitHandler","e","a","preventDefault","length","messageData","hours","Date","getHours","minutes","getMinutes","emit","console","log","messages","useEffect","on","chatHeader","type","placeholder","onChange","target","value","onKeyPress","key","onClick","map","msg","i","process","REACT_APP_API_ENDPOINT","io","connect","App","setUsername","setRoom","joinedRoom","setJoinedRoom","joinHandler","onSubmit","htmlFor","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8137b8ae.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Chat\":\"Chat_Chat__3RhN7\",\"chatHeader\":\"Chat_chatHeader__1JyAv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Message\":\"Message_Message__2s4Xw\"};","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./Message.module.css\";\n\nconst Message = ({ userData }) => (\n  <div\n    className={styles.Message}\n    style={{\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"flex-start\",\n      margin: \"10px 0 10px 0\",\n      padding: \"10px\",\n      width: \"18em\",\n      textAlign: \"left\",\n      gap: \"10px\",\n    }}\n  >\n    <p style={{ margin: \"0\" }}>\n      {userData.username} - {userData.time}\n    </p>\n    <p style={{ margin: \"0\", fontSize: \"16px\", fontWeight: \"bold\" }}>\n      {userData.message}\n    </p>\n  </div>\n);\n\nMessage.propTypes = {};\n\nMessage.defaultProps = {};\n\nexport default Message;\n","import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./Chat.module.css\";\nimport Message from \"../Message/Message\";\n\nconst Chat = ({ socket, username, room }) => {\n  const [message, setMessage] = useState(\"\");\n  const [messageList, setMessageList] = useState([]);\n\n  const submitHandler = async (e) => {\n    e && e.preventDefault();\n    if (message.length < 1) return;\n\n    const messageData = {\n      username,\n      room,\n      message,\n      time: (() => {\n        const hours = new Date().getHours();\n        let minutes = new Date().getMinutes();\n        if (minutes < 10) minutes = \"0\" + minutes;\n        if (hours === 0) return `12:${minutes}am`;\n        return hours > 12\n          ? `${hours - 12}:${minutes}pm`\n          : `${hours}:${minutes}am`;\n      })(),\n    };\n    await socket.emit(\"send_message\", messageData);\n    messageData.username = \"me\";\n    console.log(messageList);\n    setMessageList((messages) => [...messages, messageData]);\n  };\n\n  useEffect(() => {\n    socket.on(\"receive_message\", (messageData) => {\n      console.log(messageList);\n      setMessageList((messages) => [...messages, messageData]);\n    });\n  }, [socket]);\n\n  return (\n    <div className={styles.Chat}>\n      <div>\n        <h2 className={styles.chatHeader}>{room} - Live Chat</h2>\n      </div>\n\n      <div className=\"chat-footer\">\n        <input\n          type=\"text\"\n          placeholder=\"Hey...\"\n          onChange={(e) => setMessage(e.target.value)}\n          onKeyPress={(e) => e.key === \"Enter\" && submitHandler()}\n        />\n        <button onClick={submitHandler}>Send</button>\n      </div>\n      <div className=\"chat-body\">\n        {messageList.map((msg, i) => {\n          return <Message key={i} userData={msg} />;\n        })}\n      </div>\n    </div>\n  );\n};\n\nChat.propTypes = {};\n\nChat.defaultProps = {};\n\nexport default Chat;\n","import \"./App.css\";\nimport io from \"socket.io-client\";\nimport { useState } from \"react\";\nimport Chat from \"./components/Chat/Chat\";\nconsole.log(process.env.REACT_APP_API_ENDPOINT);\nconst socket = io.connect(process.env.REACT_APP_API_ENDPOINT);\n// TODO: add scroll wheel for message display\n//\nfunction App() {\n  const [username, setUsername] = useState(\"\");\n  const [room, setRoom] = useState(\"\");\n  const [joinedRoom, setJoinedRoom] = useState(\"\");\n  const validate = () => {\n    return room.length > 0 && username.length > 0;\n  };\n\n  const joinHandler = (e) => {\n    e && e.preventDefault();\n    if (!validate()) return console.log(\":(\");\n    console.log(\"joined room: \", room);\n    setJoinedRoom(room);\n    socket.emit(\"join_room\", room);\n  };\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={joinHandler} className=\"form\">\n        <div className=\"card\">\n          <h1 className=\"title\">Join a chat</h1>\n          <label className=\"name\" htmlFor=\"name\">\n            Name\n          </label>\n          <input\n            id=\"name\"\n            type=\"text\"\n            className=\"name-input\"\n            onChange={(e) => setUsername(e.target.value)}\n          />\n          <label className=\"room\" htmlFor=\"room\">\n            Room\n          </label>\n          <input\n            id=\"room\"\n            type=\"text\"\n            className=\"room-input\"\n            onChange={(e) => setRoom(e.target.value)}\n            onKeyPress={(e) => e.key === \"Enter\" && joinHandler()}\n          />\n          <button className=\"join\">Join</button>\n        </div>\n      </form>\n      {joinedRoom !== \"\" && (\n        <Chat socket={socket} username={username} room={joinedRoom} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}